// <auto-generated />
using System;
using Cricket.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Cricket.Migrations
{
    [DbContext(typeof(CricketDatabase))]
    [Migration("20230305154225_new")]
    partial class @new
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Cricket.Models.Ball", b =>
                {
                    b.Property<Guid>("BallId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("BallNo")
                        .HasColumnType("int");

                    b.Property<string>("BallStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("BattingTeamId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BowlerID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("FieldingTeamId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("MatchID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("NonStrikeBatsmanId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Over")
                        .HasColumnType("int");

                    b.Property<int>("Score")
                        .HasColumnType("int");

                    b.Property<Guid>("StrikeBatsmanId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("TotalBAll")
                        .HasColumnType("int");

                    b.HasKey("BallId");

                    b.ToTable("balls");
                });

            modelBuilder.Entity("Cricket.Models.Match", b =>
                {
                    b.Property<Guid>("MatchId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int>("NoOfOvers")
                        .HasColumnType("int");

                    b.Property<Guid>("TeamA")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("TeamB")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("TossWon")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("MatchId");

                    b.ToTable("matches");
                });

            modelBuilder.Entity("Cricket.Models.Player", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Age")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreationDateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsAvailable")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("JerseyNo")
                        .HasColumnType("int");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("NoOfMatches")
                        .HasColumnType("int");

                    b.Property<string>("PlayerType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Runs")
                        .HasColumnType("int");

                    b.Property<Guid>("Team")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Wickets")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("players");
                });

            modelBuilder.Entity("Cricket.Models.PlayerTeamMap", b =>
                {
                    b.Property<Guid>("TeamMapId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PlayerID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("TeamID")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("TeamMapId");

                    b.ToTable("TeamPlayerMap");
                });

            modelBuilder.Entity("Cricket.Models.TeamModel", b =>
                {
                    b.Property<Guid>("TeamId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("TeamName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TeamId");

                    b.ToTable("teams");
                });
#pragma warning restore 612, 618
        }
    }
}
